;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/7/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// LM75 Temperature Sensor functions
;#include <lm75.h>
;#include "MCP79410.h"
;
;#include "SIM800.h"
;
;#define sendinterval 3600;
;#include <sleep.h>
;// Declare your global variables here
;//Globarl variables:
;volatile int Temp,Hum,Lux;
;volatile long int k=0; //count the refresh rate int timer 2
;int LED_Disp_show = 0; //flag for showing data in led
;
;int wait,success,success1,counter_5ms=0,now_5ms,head_onoff=1;

	.DSEG
;
;int Temp_LED=0,Hum_LED=0,Lux_LED=0,Red=0,Blue=0,Green=0,turn=0,blue_delay,red_delay;
;#define LC1 PORTB.4
;#define LC2 PORTB.3
;#define LC3 PORTA.1
;#define LC4 PORTB.5
;#define LR1 PORTA.0
;#define LR2 PORTB.0
;#define LR3 PORTB.1
;#define LR4 PORTA.3
;
;long int buff_counter; //count the chars recieved
;char rec_buff[rec_buff_size]; //store the last chars recieved from module. it used in RX interrupt function.
;long int second_=3595;
;int val[8];
;char VAR_1[7];
;char VAR_2[7];
;char VAR_3[7];
;char VAR_4[7];
;char VAR_5[7];
;char VAR_6[7];
;char VAR_7[7];
;char VAR_8[7];
;char _SERVER_[20];
;char _APN_[20];
;char _HOST_[20];
;char _PAGEADDRESS_[50];
;char _SUCCESSSIGN_[20];
;int next_send_time=25;
;
;int G_Lum, G_Temp, G_Mois; //the global variable for lux and temp and mois.
;char first_time=0;
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0054 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0055 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0056 // Delay needed for the stabilization of the ADC input voltage
; 0000 0057 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0058 // Start the AD conversion
; 0000 0059 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 005A // Wait for the AD conversion to complete
; 0000 005B while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 005C ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 005D return ADCH;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005E }
;PCODE: $00000021 VOL: 0
;
;void LED_Disp(void)
; 0000 0061 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0062     Lux_LED = 0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0063     if(G_Lum > 160) Lux_LED = 1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0064     if(G_Lum > 180) Lux_LED = 2;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0065     if(G_Lum > 200) Lux_LED = 3;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0066     if(G_Lum > 220) Lux_LED = 4;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0067 
; 0000 0068     Temp_LED =0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0069     if(G_Temp > 200) Temp_LED = 1;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006A     if(G_Temp > 270) Temp_LED = 2;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006B     if(G_Temp > 350) Temp_LED = 3;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006C     if(G_Temp > 400) Temp_LED = 4;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006D 
; 0000 006E 
; 0000 006F     Hum_LED=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0070     if(G_Mois > 25) Hum_LED = 1;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0071     if(G_Mois > 50) Hum_LED = 2;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0072     if(G_Mois > 90) Hum_LED = 3;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0073     if(G_Mois > 120) Hum_LED = 4;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0074 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;void LED_Disp_clear(void)
; 0000 0076 {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0077     Lux_LED = 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0078     Temp_LED =0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0079     Hum_LED=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007A }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;int moisture(int times)
; 0000 007C {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007D     float sum=0;
; 0000 007E     int i;
; 0000 007F     for(i=0;i<times;i++)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	times -> Y+6
;	sum -> Y+2
;	i -> R16,R17
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0080     {
; 0000 0081         sum = sum + (float)read_adc(6);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0082     }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0083     return (int)(sum/times);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0084 }
;PCODE: $000000AB VOL: 0
;int temperature(void)
; 0000 0086 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0087     return lm75_temperature_10(0)-2;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0088 }
;PCODE: $000000B2 VOL: 0
;int battery_voltage(void)
; 0000 008A {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 008B     return (int)(100*((2.49*255)/((float)read_adc(5))));
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 008C }
;PCODE: $000000BE VOL: 0
;
;int luminosity(int times)
; 0000 008F {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0090     float sum=0;
; 0000 0091     int i;
; 0000 0092     for(i=0;i<times;i++)
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;	times -> Y+6
;	sum -> Y+2
;	i -> R16,R17
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0093     {
; 0000 0094         sum = sum + (float)read_adc(2);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0095     }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0096     return (int)(sum/times);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0097 }
;PCODE: $000000EC VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 009B {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 009C // Place your code here
; 0000 009D     char sms_buff[30];
; 0000 009E     int t_out=0;
; 0000 009F     int step=0;
; 0000 00A0     int min, last_min;
; 0000 00A1     int YEAR_,MONTH_,DATE_,HOUR_,MIN_,SEC_;
; 0000 00A2 
; 0000 00A3     //sleep disable:
; 0000 00A4     sleep_disable();
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;	sms_buff -> Y+20
;	t_out -> R16,R17
;	step -> R18,R19
;	min -> R20,R21
;	last_min -> Y+18
;	YEAR_ -> Y+16
;	MONTH_ -> Y+14
;	DATE_ -> Y+12
;	HOUR_ -> Y+10
;	MIN_ -> Y+8
;	SEC_ -> Y+6
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A5 
; 0000 00A6     min = minute();
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A7 
; 0000 00A8     /*
; 0000 00A9     LC1=1;
; 0000 00AA     LR1=1;
; 0000 00AB     delay_ms(10);
; 0000 00AC     LC1=0;
; 0000 00AD     LR1=0;
; 0000 00AE     */
; 0000 00AF 
; 0000 00B0     //if(first_time==1 || min==0)
; 0000 00B1     if(min % 15 == 0 || first_time==1)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B2     {
; 0000 00B3         PORTC.4 = 0; // Turning (OnOff) MOSFET on!
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B4         first_time=0;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B5 
; 0000 00B6         LED_Disp_show=1; // turning led display on
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00B7         delay_ms(5000);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B8 
; 0000 00B9         //set values:
; 0000 00BA         val[0]=luminosity(10);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00BB         val[1]=temperature();
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00BC         val[2]=moisture(500);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00BD         val[3]=battery_voltage();
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00BE         val[4]=0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BF         val[5]=123;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00C0         val[7]=0;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C1 
; 0000 00C2         GICR = (0<<INT1); // disable ext int 1 from RTC
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C3         #asm("sei");
;PCODE: $00000127 VOL: 0
	sei
;PCODE: $00000128 VOL: 0
; 0000 00C4 
; 0000 00C5         //turning on module
; 0000 00C6         if(step==0)
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C7         {
; 0000 00C8             if(sim800_on())
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C9             {
; 0000 00CA                 step++;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CB             }
; 0000 00CC             else
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CD             {
; 0000 00CE                 //Error on step 0
; 0000 00CF             }
;PCODE: $00000132 VOL: 0
; 0000 00D0         }
; 0000 00D1 
; 0000 00D2         //Step 1: initialize Program basic paramiter  programmer should modify the prog_init() function.
; 0000 00D3         if(step==1)
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00D4         {
; 0000 00D5             prog_init();
;PCODE: $00000137 VOL: 0
; 0000 00D6             step++;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D7         }
; 0000 00D8 
; 0000 00D9         //Step 2: initialize Module:
; 0000 00DA         if(step==2)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00DB         {
; 0000 00DC             sim800_init("");
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00DD             step++;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00DE         }
; 0000 00DF 
; 0000 00E0         //Step 3: Wait until registeration in network:
; 0000 00E1         if(step==3)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E2         {
; 0000 00E3             t_out=0;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E4             while(!check_reg() && t_out<=25)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00E5             {
; 0000 00E6                  //wait until reg on network
; 0000 00E7                  delay_ms(1000);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00E8             }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00E9 
; 0000 00EA             if(t_out<=25)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00EB             {
; 0000 00EC                 val[6]=signal_q();
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00ED                 step++;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00EE             }
; 0000 00EF             else
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00F0             {
; 0000 00F1                 //Error on step 3
; 0000 00F2             }
;PCODE: $00000162 VOL: 0
; 0000 00F3         }
; 0000 00F4 
; 0000 00F5         //Step 4: Post data.
; 0000 00F6         if(step==4)
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00F7         {
; 0000 00F8             if(post_data(val))
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00F9             {
; 0000 00FA                 step++;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00FB             }
; 0000 00FC             delay_ms(1000);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00FD         }
; 0000 00FE 
; 0000 00FF         //Time IC Settings
; 0000 0100         if(step==5)
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0101         {
; 0000 0102             get_server_time(&YEAR_,&MONTH_,&DATE_,&HOUR_,&MIN_,&SEC_);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0103             setDateTime(YEAR_-2000,MONTH_,DATE_,HOUR_,MIN_,SEC_);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0104         }
; 0000 0105         sim800_off();
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0106 
; 0000 0107         delay_ms(15000);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0108         LED_Disp_show=0; // turning led display off
;PCODE: $00000191 VOL: 0
; 0000 0109         delay_ms(10);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 010A     }
; 0000 010B     GICR = (1<<INT1); // re-enable ext int 1 from RTC
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 010C     //sleep and interrupt enable
; 0000 010D     #asm("sei");
;PCODE: $00000198 VOL: 0
	sei
;PCODE: $00000199 VOL: 0
; 0000 010E     sleep_enable();
;PCODE: $0000019A VOL: 0
; 0000 010F }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0

	.DSEG
_0x25:
	.BYTE 0x1
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 011A {

	.CSEG
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 011B     char data;
; 0000 011C     data=UDR;
;PCODE: $000001A2 VOL: 0
;	data -> R17
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 011D     //lcd_putchar(data);
; 0000 011E     rec_buff[buff_counter]=data;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 011F 
; 0000 0120     buff_counter++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0121     if(buff_counter>=rec_buff_size || (rec_buff[buff_counter]=='P' && rec_buff[buff_counter-1]=='I' && rec_buff[buff_cou ...
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0122     {
; 0000 0123        buff_counter=0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0124     }
; 0000 0125 }
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 012C {
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 012D     return 0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 012E }
;PCODE: $000001CF VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0138 {
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0139     // Reinitialize Timer 0 value
; 0000 013A     TCNT0=0x28;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 013B     // Place your code here
; 0000 013C     //refreshing the led datas, each 1 sec
; 0000 013D     if(LED_Disp_show)
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 013E     {
; 0000 013F         if(k>=500)
;PCODE: $000001D6 VOL: 1
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0140         {
; 0000 0141             k=0;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 1
; 0000 0142             G_Lum=luminosity(2);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0143             G_Temp=temperature();
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0144             G_Mois=moisture(5);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0145             LED_Disp();
;PCODE: $000001E5 VOL: 0
; 0000 0146         }
; 0000 0147         k++;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 1
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0148     }
; 0000 0149     else
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 014A     {
; 0000 014B         LED_Disp_clear();
;PCODE: $000001ED VOL: 0
; 0000 014C     }
;PCODE: $000001EE VOL: 0
; 0000 014D }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0152 {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0153     //Reinitialize Timer2 value
; 0000 0154 
; 0000 0155     TCNT2=0x94;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0156     //Place your code here
; 0000 0157 
; 0000 0158     turn++;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0159 
; 0000 015A     if(turn==1 && red_delay>=4)       // Red turn
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 015B     {
; 0000 015C         red_delay = 0;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 015D 
; 0000 015E         LC1 = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 015F         LC2 = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0160         LC3 = 0;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0161         LC4 = 0;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0162         //delay_us(10);
; 0000 0163 
; 0000 0164         LR1 = (Temp_LED > 0) ? 1 : 0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0165         LR2 = (Temp_LED > 1) ? 1 : 0;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0166         LR3 = (Temp_LED > 2) ? 1 : 0;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0167         LR4 = (Temp_LED > 3) ? 1 : 0;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0168         //delay_us(10);
; 0000 0169 
; 0000 016A         LC1 = 1;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 016B         LC2 = 0;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 016C         LC3 = 0;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 016D         LC4 = 0;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 016E     }
; 0000 016F     else if(turn==2 && blue_delay>=2)  // Blue turn
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0170     {
; 0000 0171         blue_delay = 0;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0172 
; 0000 0173         LC1 = 0;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0174         LC2 = 0;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0175         LC3 = 0;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0176         LC4 = 0;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0177         //delay_us(10);
; 0000 0178 
; 0000 0179         LR1 = (Hum_LED > 0) ? 1 : 0;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 017A         LR2 = (Hum_LED > 1) ? 1 : 0;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 017B         LR3 = (Hum_LED > 2) ? 1 : 0;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 017C         LR4 = (Hum_LED > 3) ? 1 : 0;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 017D         //delay_us(10);
; 0000 017E 
; 0000 017F         LC1 = 0;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0180         LC2 = 1;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0181         LC3 = 0;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0182         LC4 = 0;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0183     }
; 0000 0184     else if(turn==3)  // Green turn
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0185     {
; 0000 0186         LC1 = 0;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0187         LC2 = 0;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0188         LC3 = 0;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0189         LC4 = 0;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 018A         //delay_us(10);
; 0000 018B 
; 0000 018C         LR1 = (Lux_LED > 2) ? 1 : 0;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 018D         LR2 = (Lux_LED > 1) ? 1 : 0;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 018E         LR3 = (Lux_LED > 0) ? 1 : 0;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 018F         LR4 = (Lux_LED > 3) ? 1 : 0;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0190         //delay_us(10);
; 0000 0191 
; 0000 0192         LC1 = 0;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0193         LC2 = 0;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0194         LC3 = 1;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0195         LC4 = 0;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 0196     }
; 0000 0197     else if(turn==4)  // Head turn
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0198     {
; 0000 0199         LC1 = 0;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 019A         LC2 = 0;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 019B         LC3 = 0;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 019C         LC4 = 0;
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 019D         //delay_us(10);
; 0000 019E 
; 0000 019F         LR1 = (Green == 1) ? 1 : 0;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01A0         LR2 = (0 == 0) ? 0 : 0;;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01A1         LR3 = (Blue == 1) ? 1 : 0;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 01A2         LR4 = (Red == 1) ? 1 : 0;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01A3         //delay_us(10);
; 0000 01A4 
; 0000 01A5         LC1 = 0;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 01A6         LC2 = 0;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 01A7         LC3 = 0;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01A8         LC4 = (head_onoff == 1);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 01A9 
; 0000 01AA         turn = 0;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01AB         blue_delay++;
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 01AC         red_delay++;
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01AD     }
; 0000 01AE 
; 0000 01AF }
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;
;void main(void)
; 0000 01B2 {
;PCODE: $00000389 VOL: 0
; 0000 01B3 // Declare your local variables here
; 0000 01B4 
; 0000 01B5 // Input/Output Ports initialization
; 0000 01B6 // Port A initialization
; 0000 01B7 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 01B8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (0<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01B9 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=0
; 0000 01BA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01BB 
; 0000 01BC // Port B initialization
; 0000 01BD // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 01BE DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 01BF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 01C0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 01C1 
; 0000 01C2 // Port C initialization
; 0000 01C3 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 01C4 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01C5 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 01C6 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 01C7 
; 0000 01C8 // Port D initialization
; 0000 01C9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01CA DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 01CB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01CC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01CD 
; 0000 01CE // Timer/Counter 0 initialization
; 0000 01CF // Clock source: System Clock
; 0000 01D0 // Clock value: 43.200 kHz
; 0000 01D1 // Mode: Normal top=0xFF
; 0000 01D2 // OC0 output: Disconnected
; 0000 01D3 // Timer Period: 5 ms
; 0000 01D4 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 01D5 TCNT0=0x28;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 01D6 OCR0=0x00;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 01D7 
; 0000 01D8 // Timer/Counter 1 initialization
; 0000 01D9 // Clock source: System Clock
; 0000 01DA // Clock value: 1382.400 kHz
; 0000 01DB // Mode: Fast PWM top=0x00FF
; 0000 01DC // OC1A output: Non-Inverted PWM
; 0000 01DD // OC1B output: Disconnected
; 0000 01DE // Noise Canceler: Off
; 0000 01DF // Input Capture on Falling Edge
; 0000 01E0 // Timer Period: 0.18519 ms
; 0000 01E1 // Output Pulse(s):
; 0000 01E2 // OC1A Period: 0.18519 ms Width: 0 us
; 0000 01E3 // Timer1 Overflow Interrupt: On
; 0000 01E4 // Input Capture Interrupt: Off
; 0000 01E5 // Compare A Match Interrupt: Off
; 0000 01E6 // Compare B Match Interrupt: Off
; 0000 01E7 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 01E8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 01E9 TCNT1H=0xF7;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 01EA TCNT1L=0x5C;
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01EB ICR1H=0x00;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 01EC ICR1L=0x00;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01ED OCR1AH=0x00;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01EE OCR1AL=0x00;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 01EF OCR1BH=0x00;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 01F0 OCR1BL=0x00;
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 01F1 
; 0000 01F2 // Timer/Counter 2 initialization
; 0000 01F3 // Clock source: System Clock
; 0000 01F4 // Clock value: 172.800 kHz
; 0000 01F5 // Mode: Normal top=0xFF
; 0000 01F6 // OC2 output: Disconnected
; 0000 01F7 // Timer Period: 1.0012 ms
; 0000 01F8 ASSR=0<<AS2;
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 01F9 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 01FA TCNT2=0x53;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 01FB OCR2=0x00;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 01FC 
; 0000 01FD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01FE TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 01FF 
; 0000 0200 // External Interrupt(s) initialization
; 0000 0201 // INT0: Off
; 0000 0202 // INT1: On
; 0000 0203 // INT1 Mode: Falling Edge
; 0000 0204 // INT2: Off
; 0000 0205 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0206 MCUCR=(1<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0207 MCUCSR=(0<<ISC2);
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 0208 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 0209 
; 0000 020A // USART initialization
; 0000 020B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 020C // USART Receiver: On
; 0000 020D // USART Transmitter: On
; 0000 020E // USART Mode: Asynchronous
; 0000 020F // USART Baud Rate: 9600
; 0000 0210 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 0211 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0212 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0213 UBRRH=0x00;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0214 UBRRL=0x47;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0215 
; 0000 0216 // Analog Comparator initialization
; 0000 0217 // Analog Comparator: Off
; 0000 0218 // The Analog Comparator's positive input is
; 0000 0219 // connected to the AIN0 pin
; 0000 021A // The Analog Comparator's negative input is
; 0000 021B // connected to the AIN1 pin
; 0000 021C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 021D 
; 0000 021E // ADC initialization
; 0000 021F // ADC Clock frequency: 691.200 kHz
; 0000 0220 // ADC Voltage Reference: AREF pin
; 0000 0221 // ADC Auto Trigger Source: ADC Stopped
; 0000 0222 // Only the 8 most significant bits of
; 0000 0223 // the AD conversion result are used
; 0000 0224 ADMUX=ADC_VREF_TYPE;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0225 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 0226 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0227 
; 0000 0228 // SPI initialization
; 0000 0229 // SPI disabled
; 0000 022A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 022B 
; 0000 022C // TWI initialization
; 0000 022D // TWI disabled
; 0000 022E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 022F 
; 0000 0230 // Bit-Banged I2C Bus initialization
; 0000 0231 // I2C Port: PORTC
; 0000 0232 // I2C SDA bit: 0
; 0000 0233 // I2C SCL bit: 1
; 0000 0234 // Bit Rate: 100 kHz
; 0000 0235 // Note: I2C settings are specified in the
; 0000 0236 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0237 i2c_init();
;PCODE: $000003DD VOL: 0
; 0000 0238 
; 0000 0239 // LM75 Temperature Sensor initialization
; 0000 023A // thyst: 75°C
; 0000 023B // tos: 80°C
; 0000 023C // O.S. polarity: 0
; 0000 023D lm75_init(0,75,80,0);
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 023E 
; 0000 023F //first time:
; 0000 0240 first_time=1;
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0241 
; 0000 0242 setDateTime(17,1,1,12,5,5);
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 0243 
; 0000 0244 LED_Disp_clear();
;PCODE: $000003F4 VOL: 0
; 0000 0245 
; 0000 0246 PORTA.4 = 0; // MOSVCC on!
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0247 OCR1A = 500;
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 0248 
; 0000 0249 delay_ms(500);
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 024A // Global enable interrupts
; 0000 024B 
; 0000 024C #asm("sei")
;PCODE: $000003FB VOL: 0
	sei
;PCODE: $000003FC VOL: 0
; 0000 024D sleep_enable();
;PCODE: $000003FD VOL: 0
; 0000 024E idle();
;PCODE: $000003FE VOL: 0
; 0000 024F delay_ms(3000);
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0250 
; 0000 0251 while (1)
;PCODE: $00000401 VOL: 0
; 0000 0252       {
; 0000 0253          /*
; 0000 0254          Red = (i<11);
; 0000 0255          Blue = (i > 11 && i < 22);
; 0000 0256          Green = (i > 22);
; 0000 0257          Temp_LED = timing[(i)%33];
; 0000 0258          Hum_LED = timing[(i+22)%33];
; 0000 0259          Lux_LED = timing[(i+11)%33];
; 0000 025A          i++;
; 0000 025B          i=i%33;
; 0000 025C          delay_ms(60);
; 0000 025D          */
; 0000 025E          //Temp = lm75_temperature_10(0);  //requires 300ms delay afterwards
; 0000 025F          //Hum = read_adc(6);
; 0000 0260          //printf("%02d:%02d:%02d\n",hour24(),minute(),second());
; 0000 0261          //printf("%d\n",Hum);
; 0000 0262          //delay_ms(1000);
; 0000 0263 
; 0000 0264          PORTA.4 = 0; // MOSVCC on!
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0265          GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0266 
; 0000 0267 
; 0000 0268          #asm("sei");
;PCODE: $00000407 VOL: 0
	sei
;PCODE: $00000408 VOL: 0
; 0000 0269          sleep_enable();
;PCODE: $00000409 VOL: 0
; 0000 026A          idle();
;PCODE: $0000040A VOL: 0
; 0000 026B 
; 0000 026C          //delay_ms(1000);
; 0000 026D          //goto sleep
; 0000 026E 
; 0000 026F       }
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0270 }
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
